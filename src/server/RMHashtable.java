// -------------------------------// Adapted from Kevin T. Manley// CSE 593// -------------------------------package server;import java.util.*;import java.io.File;import java.io.FileInputStream;import java.io.IOException;// A specialization of Hashtable with some extra diagnostics.public class RMHashtable extends Hashtable {    public RMHashtable() {      super();    }    public String toString() {        String s = "RMHashtable { \n";        Object key = null;        for (Enumeration e = keys(); e.hasMoreElements();) {            key = e.nextElement();            String value = (String) get(key);            s = s + "  [key = " + key + "] " + value + "\n";        }        s = s + "}";        return s;    }    public void dump() {        System.out.println(toString());    }		public synchronized void save(String rmName, boolean committed)	{		FileOutputStream fos = new FileOutputStream(committed ? rmName+"_committed.ht" : rmName+"_uncommitted.ht");		ObjectOutputStream oos = new ObjectOutputStream(fos);		oos.writeObject(this);		oos.close();	}		public static RMHashtable load(String rmName, boolean committed)	{		System.out.println("Loading hashtable.");		RMHashtable table = new RMHashtable();		try {						// ref : http://www.mkyong.com/java/how-to-read-file-in-java-fileinputstream/			FileInputStream fis = new FileInputStream(new File(rmName+ (committed ? "_committed.ht" : "_uncommitted.ht")));						// load master record into class var.			// ref : http://www.tutorialspoint.com/java/io/objectinputstream_readobject.htm            ObjectInputStream ois = new ObjectInputStream(fis);			table = (RMHashtable) ois.readObject();			fis.close();					} catch (IOException e)		{ // does not exist, so create.			System.out.println("No hashtable found on disk - creating new file.");			table.save();		}		return table;	}}